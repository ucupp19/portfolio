# Multi-stage build optimized for low memory
FROM node:20-alpine AS deps

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production --no-audit --no-fund

# Build stage with memory optimization
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies
RUN npm ci --no-audit --no-fund

# Copy source code
COPY . .

# Build with memory optimization
ENV NODE_OPTIONS="--max-old-space-size=512"
RUN npm run build

# Production stage
FROM nginx:alpine

# Install only essential packages
RUN apk add --no-cache --virtual .build-deps \
    && apk add --no-cache \
    && rm -rf /var/cache/apk/*

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy SSL certificates
COPY ssl/ /etc/nginx/ssl/

# Expose ports
EXPOSE 80 443

# Start nginx
CMD ["nginx", "-g", "daemon off;"] 